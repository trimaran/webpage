%!PS-Adobe-3.0
%%Title: (Microsoft Word - Trimaran Rea\311)
%%Creator: (Microsoft Word: LaserWriter 8 8.3.4)
%%CreationDate: (18:55 Monday, August 3, 1998)
%%For: (Bob Rau)
%%Pages: 9
%%DocumentFonts: Times-Bold Times-Roman Times-Italic
%%DocumentNeededFonts: Times-Bold Times-Roman Times-Italic
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_ImageableArea: 31 31 583 761
%%EndComments
userdict begin/dscInfo 5 dict dup begin
/Title(Microsoft Word - Trimaran Rea\311)def
/Creator(Microsoft Word: LaserWriter 8 8.3.4)def
/CreationDate(18:55 Monday, August 3, 1998)def
/For(Bob Rau)def
/Pages 9 def
end def end
/md 168 dict def md begin/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 83 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F1/setgray ld
/:F/setrgbcolor ld
/:F4/setcmykcolor where
{
pop
/setcmykcolor ld
}{
{
3
{
dup
3 -1 roll add
dup 1 gt{pop 1}if
1 exch sub
4 1 roll
}repeat
pop
setrgbcolor
}bd
}ifelse
/:Fx
{
counttomark
{0{G}0{:F}{:F4}}
exch get
exec
pop
}bd
/:rg{/DeviceRGB :ss}bd
/:sc{$cs :ss}bd
/:dc{/$cs xdf}bd
/:sgl{}def
/:dr{}bd
/:fCRD{pop}bd
/:ckcs{}bd
/:ss{/$c xdf}bd
/$cs Z
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if end
%%EndProlog
%%BeginSetup
md begin
countdictstack[{
%%BeginFeature: *ManualFeed False
1 dict dup /ManualFeed false put setpagedevice
						<< /MediaPosition 1
	   						/TraySwitch true >> setpagedevice
%%EndFeature
}featurecleanup
countdictstack[{
%%BeginFeature: *PageSize LetterSmall

     currentpagedevice /InputAttributes get dup 0 get 
	 dup length dict copy
     dup /PageSize [612 792] put 
	 2 dict dup begin exch dup 4 -1 roll 1 known {1 exch def} {pop} ifelse 
	 0 exch def end 
   3 dict 
   dup begin exch /InputAttributes exch def end 
   dup /PageSize [612 792] put
   dup /ImagingBBox null put 
   setpagedevice
%%EndFeature
}featurecleanup
(Bob Rau)setjob
/mT[1 0 0 -1 31 761]def
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Roman
%%IncludeFont: Times-Italic
/f0_1/Times-Bold
:mre
/f0_20 f0_1 20 scf
/f0_13 f0_1 13 scf
/f1_1/Times-Roman
:mre
/f1_12 f1_1 12 scf
/f2_1 f1_1
:v def
/f3_1/Times-Italic
:mre
/f3_12 f3_1 12 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(Bob Rau; page: 1 of 9)setjob
%%EndPageSetup
gS 0 0 552 730 rC
70 68 :M
f0_20 sf
(T)S
81 68 :M
-.142(rimaran ILP)A
187 68 :M
-.049( Reading List By )A
333 68 :M
(T)S
344 68 :M
(opical Category)S
59 94 :M
f1_12 sf
-.103(This is not intended to be a comprehensive and exhaustive bibliography of papers in the)A
59 106 :M
-.089(area of instruction-level parallel processing \(ILP\). Rather, this list concentrates on those)A
59 118 :M
-.108(papers that best demonstrate the EPIC architectural philosophy advocated by HPL-PD and)A
59 130 :M
-.09(the compiler philosophy, framework and techniques embodied in Trimaran. This reading)A
59 142 :M
-.054(list is designed for people who wish to get up to speed on the use of HPL-PD and)A
59 154 :M
-.079(Trimaran, and who wish to further the state of the art of compiling for EPIC architectures.)A
59 178 :M
-.086(A good starting point is to understand HPL-PD [1], the way in which the architectural)A
59 190 :M
-.053(features of HPL-PD were intended to be used [2], and the space of EPIC processors that)A
59 202 :M
-.045(can be described to, and compiled by, Trimaran [3, 4]. Thereafter, one could focus on)A
59 214 :M
-.059(those topics listed below that represent one's areas of research interest.)A
59 239 :M
f0_13 sf
.136 .014(ILP survey)J
59 254 :M
f1_12 sf
-.071(A survey of instruction-level parallel processing as of 1992 [5].)A
59 279 :M
f0_13 sf
-.012(VLIW architecture)A
59 294 :M
f1_12 sf
-.097(Commercial VLIW products [6-9].)A
59 319 :M
f0_13 sf
-.009(EPIC architecture)A
59 334 :M
f1_12 sf
-.109(The original specification of the EPIC style of architecture [1] and a discussion of the)A
59 346 :M
-.095(underlying philosphy as well as the motivation for the various architectural features [2].)A
59 358 :M
-.111(Partial details of the IA-64, the first commercial instance of an EPIC architecture [10].)A
59 383 :M
f0_13 sf
-.044(ILP compiler systems)A
59 398 :M
f1_12 sf
-.054(ILP compilers of significant scope [11-14].)A
59 423 :M
f0_13 sf
(ILP optimizations)S
59 438 :M
f1_12 sf
-.055(Various optimizations that have special relevance to an ILP processor [11, 15, 16, 12-14,)A
59 450 :M
1.18 .118(17, 18].)J
59 475 :M
f0_13 sf
1.15 .115(Acyclic scheduling)J
59 490 :M
f1_12 sf
-.01(Trace scheduling [19, 13, 20], superblock scheduling [12], hyperblock scheduling [21],)A
59 502 :M
-.038(more general scheduling algorithms [22-24], and inter-region scheduling [11, 13, 25].)A
59 527 :M
f0_13 sf
.457 .046(Modulo scheduling)J
59 542 :M
f1_12 sf
-.055(Modulo scheduling of DO-loops [26-28, 2]. Modulo scheduling of WHILE-loops and)A
59 554 :M
-.04(loops with early exits [29, 30]. Modulo scheduling of loops with control flow, without the)A
59 566 :M
-.038(use of predication [31, 32]. Register-pressure sensitive modulo scheduling [33-36]. A)A
59 578 :M
-.05(survey of software pipelining techniques [37].)A
59 603 :M
f0_13 sf
.582 .058(Array variable promotion and expanded virtual registers \(EVRs\))J
59 618 :M
f1_12 sf
-.127(Array variable promotion to eliminate array loads and stores that are redundant within or)A
59 630 :M
-.043(across iterations of the loop [38-40, 14]. The following papers also discuss the value flow)A
59 642 :M
-.064(analysis required [39, 14, 41] and the use of expanded virtual registers \(EVRs\) to avoid the)A
59 654 :M
-.066(premature introduction of register-register copy operations [39, 14].)A
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(Bob Rau; page: 2 of 9)setjob
%%EndPageSetup
gS 0 0 552 730 rC
59 51 :M
f0_13 sf
1.215 .122(Register allocation)J
59 66 :M
f1_12 sf
-.09(Rotating register allocation [42]. Register allocation for predicated code [43, 44].)A
59 91 :M
f0_13 sf
-.002(If-conversion and the use of predicates)A
59 106 :M
f1_12 sf
-.073(If-conversion to form predicated code [26, 45, 14]. The application of predicates: an)A
59 118 :M
-.006(overview [2], in modulo scheduling [26, 27], in scheduling acyclic regions [21, 46, 47], in)A
59 130 :M
-.095(reducing the length of the critical path through the computation [48, 49], and as an)A
59 142 :M
-.096(intermediate form when scheduling control-intensive regions for a processor without)A
59 154 :M
-.112(predicated execution [50]. The benefits of predicated execution in modulo scheduling [51])A
59 166 :M
-.072(and in acyclic regions [52].)A
59 191 :M
f0_13 sf
.538 .054(Analysis of predicated code)J
59 206 :M
f1_12 sf
-.111(Analysis of predicated code [53]. The application of such analyses to register allocation)A
59 218 :M
1.119 .112([43, 44].)J
59 243 :M
f0_13 sf
.623 .062(Control speculation and recovery)J
59 258 :M
f1_12 sf
-.079(Control speculation, i.e., the movement of operations to an earlier point than the branch or)A
59 270 :M
-.064(predicate-setting operation upon which it is dependent [19, 54, 46, 2, 47] and architectural)A
59 282 :M
-.046(and compiler techniques to support correct exception handling [55, 54, 56, 2].)A
59 307 :M
f0_13 sf
.485 .049(Data speculation)J
59 322 :M
f1_12 sf
-.093(Data speculation, i.e., the movement of a load to an earlier point than a store upon which it)A
59 334 :M
-.021(might be dependent [57-59, 2].)A
59 359 :M
f0_13 sf
.815 .082(Tolerating branch latency)J
59 374 :M
f1_12 sf
-.066("Unbundled" branches [2]. Static branch prediction [60, 61]. Programmatically-computed)A
59 386 :M
-.087(dynamic branch prediction [62].)A
59 411 :M
f0_13 sf
.274 .027(Critical path reduction \(CPR\))J
59 426 :M
f1_12 sf
-.136(Compiler transformations to reduce the length of the critical path through a computation)A
59 438 :M
.872 .087([63, 48, 49, 64].)J
59 463 :M
f0_13 sf
.503 .05(Tolerating data cache miss latency)J
59 478 :M
f1_12 sf
-.127(Predicting which memory references will cause data cache misses and either prefetching)A
59 490 :M
-.054(them or scheduling them early [65] [66] [67] [68] [2].)A
59 515 :M
f0_13 sf
.457 .046(Machine description)J
59 530 :M
f1_12 sf
-.129(The machine description database and query interface used by the ILP compiler to)A
59 542 :M
-.083(understand the relevant details of the target processor [3, 4, 69]. Optimization of the)A
59 554 :M
-.034(machine description [70, 71].)A
59 579 :M
f0_13 sf
.57 .057(Region-based compiling)J
59 594 :M
f1_12 sf
-.062(An approach to structuring ILP compilers which is embedded in, and supported by,)A
59 606 :M
-.048(Trimaran [18].)A
59 0 9 730 rC
59 630 :M
12 f2_1 :p
9 :m
(   )S
65 630 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
59 630 :M
f1_12 sf
12 f2_1 :p
23 :m
-.108(Note)A
77 0 5 730 rC
77 630 :M
3 :m
( )S
79 630 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
82 630 :M
f1_12 sf
-.108(: A number of the HPL Technical Reports in this reading list have been published as)A
59 642 :M
-.117(journal articles or in conference proceedings. The technical reports were listed because they)A
59 654 :M
-.075(are more complete and comprehensive than the corresponding papers. However, for the)A
59 666 :M
-.075(benefit of individuals who would like to read the paper, and for the purposes of referencing)A
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(Bob Rau; page: 3 of 9)setjob
%%EndPageSetup
gS 0 0 552 730 rC
59 50 :M
f1_12 sf
-.074(these works, we list here pairs of references. In each pair, the first reference is the technical)A
59 62 :M
-.088(report and the second one is the corresponding paper:)A
77 86 :M
.571 .057([5], [72])J
77 98 :M
.541 .054([27], [73])J
77 110 :M
.541 .054([28], [72])J
77 122 :M
.541 .054([49], [74])J
77 134 :M
.541 .054([53], [75])J
77 146 :M
.541 .054([48], [76])J
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(Bob Rau; page: 4 of 9)setjob
%%EndPageSetup
gS 0 0 552 730 rC
218 68 :M
f0_20 sf
.069(Bibliography)A
59 115 :M
f1_12 sf
1(1.)A
86 115 :M
.17 .017(V. Kathail, M. Schlansker and B. R. Rau. )J
290 0 9 730 rC
290 115 :M
12 f2_1 :p
9 :m
(   )S
296 115 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
290 115 :M
f1_12 sf
12 f2_1 :p
169 :m
-.169(HPL-PD Architecture Specification:)A
86 0 8 730 rC
86 127 :M
6 :m
(  )S
91 127 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 127 :M
f1_12 sf
12 f2_1 :p
55.983 :m
(Version 1.1)S
136 0 6 730 rC
136 127 :M
6 :m
(  )S
139 127 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
142 127 :M
f1_12 sf
-.027(. Technical Report HPL-93-80 \(R.1\). Hewlett-Packard Laboratories, July)A
86 139 :M
.25(1998.)A
59 157 :M
1(2.)A
86 157 :M
.413 .041(M. Schlansker, B. R. Rau, S. Mahlke, V. Kathail, R. Johnson, S. Anik and S. G.)J
86 169 :M
-.08(Abraham. )A
136 0 8 730 rC
136 169 :M
12 f2_1 :p
6 :m
(  )S
141 169 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
136 169 :M
f1_12 sf
12 f2_1 :p
329.002 :m
-.129(Achieving High Levels of Instruction-Level Parallelism with Reduced)A
86 0 9 730 rC
86 181 :M
9 :m
(   )S
92 181 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 181 :M
f1_12 sf
12 f2_1 :p
105 :m
-.109(Hardware Complexity)A
185 0 6 730 rC
185 181 :M
6 :m
(  )S
188 181 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
191 181 :M
f1_12 sf
-.039(. HPL Technical Report HPL-96-120. Hewlett-Packard)A
86 193 :M
.013 .001(Laboratories, February 1997.)J
59 211 :M
1(3.)A
86 211 :M
.463 .046(J. C. Gyllenhaal, W.-m. W. Hwu and B. R. Rau. )J
327 0 9 730 rC
327 211 :M
12 f2_1 :p
9 :m
(   )S
333 211 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
327 211 :M
f1_12 sf
12 f2_1 :p
100.001 :m
-.061(HMDES Version 2.0)A
86 0 7 730 rC
86 223 :M
6 :m
(  )S
90 223 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 223 :M
f1_12 sf
12 f2_1 :p
61 :m
-.192(Specification)A
141 0 6 730 rC
141 223 :M
6 :m
(  )S
144 223 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
147 223 :M
f1_12 sf
-.076(. Technical Report IMPACT-96-3. University of Illinois at Urbana-)A
86 235 :M
.27 .027(Champaign, 1996.)J
59 253 :M
1(4.)A
86 253 :M
.289 .029(S. A. Gupta, V. Kathail and B. R. Rau. )J
279 0 7 730 rC
279 253 :M
12 f2_1 :p
6 :m
(  )S
283 253 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
279 253 :M
f1_12 sf
12 f2_1 :p
174.999 :m
-.101(Elcor's Machine Description System:)A
86 0 8 730 rC
86 265 :M
6 :m
(  )S
91 265 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 265 :M
f1_12 sf
12 f2_1 :p
55.983 :m
(Version 3.0)S
136 0 6 730 rC
136 265 :M
6 :m
(  )S
139 265 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
142 265 :M
f1_12 sf
-.04(. HPL Technical Report HPL-98-128. Hewlett-Packard Laboratories,)A
86 277 :M
.526 .053(July 1998.)J
59 295 :M
1(5.)A
86 295 :M
.414 .041(B. R. Rau and J. A. Fisher. )J
222 0 4 730 rC
222 295 :M
12 f2_1 :p
3 :m
( )S
223 295 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
222 295 :M
f1_12 sf
12 f2_1 :p
269.001 :m
-.083(Instruction-Level Parallel Processing: History, Overview)A
86 0 5 730 rC
86 307 :M
3 :m
( )S
88 307 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 307 :M
f1_12 sf
12 f2_1 :p
74 :m
-.116(and Perspective)A
155 0 5 730 rC
155 307 :M
3 :m
( )S
157 307 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
160 307 :M
f1_12 sf
-.048(. Technical Report HPL-92-132. Hewlett-Packard Laboratories,)A
86 319 :M
-.053(October 1992.)A
59 337 :M
1(6.)A
86 337 :M
.517 .052(R. P. Colwell, R. P. Nix, J. J. O'Donnell, D. B. Papworth and P. K. Rodman. A)J
86 349 :M
-.143(VLIW architecture for a trace scheduling compiler)A
f3_12 sf
-.087(.)A
f1_12 sf
( )S
328 0 4 730 rC
328 349 :M
12 f2_1 :p
3 :m
( )S
329 349 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
328 349 :M
f1_12 sf
12 f2_1 :p
158.001 :m
-.102(IEEE Transactions on Computers)A
481 0 5 730 rC
481 349 :M
3 :m
( )S
483 349 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 361 :M
f1_12 sf
.337 .034(C-37, 8 \(August 1988\), 967-979.)J
59 379 :M
1(7.)A
86 379 :M
.052 .005(G. R. Beck, D. W. L. Yen and T. L. Anderson. The Cydra 5 mini-supercomputer:)J
86 391 :M
-.163(architecture and implementation)A
f3_12 sf
-.098(.)A
f1_12 sf
( )S
242 0 7 730 rC
242 391 :M
12 f2_1 :p
6 :m
(  )S
246 391 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
242 391 :M
f1_12 sf
12 f2_1 :p
149.999 :m
-.082(The Journal of Supercomputing)A
386 0 6 730 rC
386 391 :M
6 :m
(  )S
389 391 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
392 391 :M
f1_12 sf
.118 .012( 7, 1/2 \(May 1993\),)J
86 403 :M
.144(143-180.)A
59 421 :M
1(8.)A
86 0 7 730 rC
86 421 :M
12 f2_1 :p
6 :m
(  )S
90 421 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 421 :M
f1_12 sf
12 f2_1 :p
206.999 :m
-.156(Trimedia TM-1 Media Processor Data Book)A
287 0 6 730 rC
287 421 :M
6 :m
(  )S
290 421 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
293 421 :M
f1_12 sf
-.048(. \(Philips Semiconductors, Trimedia)A
86 433 :M
.507 .051(Product Group, 1997\).)J
59 451 :M
1(9.)A
86 0 7 730 rC
86 451 :M
12 f2_1 :p
6 :m
(  )S
90 451 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 451 :M
f1_12 sf
12 f2_1 :p
275.001 :m
-.072(TMS320C62xx CPU and Instruction Set Reference Guide)A
356 0 5 730 rC
356 451 :M
3 :m
( )S
358 451 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
361 451 :M
f1_12 sf
.177 .018(. \(Texas Instruments,)J
86 463 :M
.201(1997\).)A
59 481 :M
.5(10.)A
86 481 :M
-.053(C. Dulong. The IA-64 architecture at work)A
f3_12 sf
(.)S
f1_12 sf
( )S
295 0 8 730 rC
295 481 :M
12 f2_1 :p
6 :m
(  )S
300 481 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
295 481 :M
f1_12 sf
12 f2_1 :p
47 :m
-.142(Computer)A
338 0 4 730 rC
338 481 :M
3 :m
( )S
339 481 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
342 481 :M
f1_12 sf
.403 .04( 31, 7 \(July 1998\), 24-32.)J
59 499 :M
.5(11.)A
86 499 :M
.555 .055(J. R. Ellis. )J
141 0 8 730 rC
141 499 :M
12 f2_1 :p
6 :m
(  )S
146 499 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
141 499 :M
f1_12 sf
12 f2_1 :p
213.999 :m
-.169(Bulldog: A Compiler for VLIW Architectures)A
350 0 5 730 rC
350 499 :M
3 :m
( )S
352 499 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
355 499 :M
f1_12 sf
.225 .023(. \(The MIT Press,)J
86 511 :M
.137 .014(Cambridge, Massachussetts, 1985\).)J
59 529 :M
.5(12.)A
86 529 :M
.559 .056(W. W. Hwu, S. A. Mahlke, W. Y. Chen, P. P. Chang, N. J. Warter, R. A.)J
86 541 :M
.385 .038(Bringmann, R. G. Ouellette, R. E. Hank, T. Kiyohara, G. E. Haab, J. G. Holm and)J
86 553 :M
-.098(D. M. Lavery. The superblock: an effective technique for VLIW and superscalar)A
86 565 :M
-.109(compilation)A
f3_12 sf
-.063(.)A
f1_12 sf
( )S
148 0 7 730 rC
148 565 :M
12 f2_1 :p
6 :m
(  )S
152 565 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
148 565 :M
f1_12 sf
12 f2_1 :p
149.999 :m
-.082(The Journal of Supercomputing)A
292 0 6 730 rC
292 565 :M
6 :m
(  )S
295 565 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
298 565 :M
f1_12 sf
.22 .022( 7, 1/2 \(May 1993\), 229-248.)J
59 583 :M
.5(13.)A
86 583 :M
.495 .049(P. G. Lowney, S. M. Freudenberger, T. J. Karzes, W. D. Lichtenstein, R. P. Nix,)J
86 595 :M
-.018(J. S. O'Donnell and J. C. Ruttenberg. The Multiflow trace scheduling compiler)A
f3_12 sf
(.)S
f1_12 sf
( )S
468 0 7 730 rC
468 595 :M
12 f2_1 :p
6 :m
(  )S
472 595 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
468 595 :M
f1_12 sf
12 f2_1 :p
18 :m
-.328(The)A
86 0 5 730 rC
86 607 :M
3 :m
( )S
88 607 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 607 :M
f1_12 sf
12 f2_1 :p
128.999 :m
-.068(Journal of Supercomputing)A
209 0 6 730 rC
209 607 :M
6 :m
(  )S
212 607 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
215 607 :M
f1_12 sf
.223 .022( 7, 1/2 \(May 1993\), 51-142.)J
59 625 :M
.5(14.)A
86 625 :M
.043 .004(J. C. Dehnert and R. A. Towle. Compiling for the Cydra 5)J
f3_12 sf
(.)S
f1_12 sf
( )S
372 0 7 730 rC
372 625 :M
12 f2_1 :p
6 :m
(  )S
376 625 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
372 625 :M
f1_12 sf
12 f2_1 :p
69 :m
-.075(The Journal of)A
86 0 7 730 rC
86 637 :M
6 :m
(  )S
90 637 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 637 :M
f1_12 sf
12 f2_1 :p
78 :m
-.101(Supercomputing)A
158 0 6 730 rC
158 637 :M
6 :m
(  )S
161 637 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
164 637 :M
f1_12 sf
.22 .022( 7, 1/2 \(May 1993\), 181-228.)J
59 655 :M
.5(15.)A
86 655 :M
-.016(W. W. Hwu and P. P. Chang. Inline function expansion for compiling realistic C)A
86 667 :M
.361 .036(programs. )J
138 0 7 730 rC
138 667 :M
12 f2_1 :p
6 :m
(  )S
142 667 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
138 667 :M
f1_12 sf
12 f2_1 :p
344 :m
-.028(Proc. SIGPLAN '89 Conference on Programming Language Design and)A
86 0 4 730 rC
86 679 :M
3 :m
( )S
87 679 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 679 :M
f1_12 sf
12 f2_1 :p
73 :m
-.229(Implementation)A
153 0 6 730 rC
153 679 :M
6 :m
(  )S
156 679 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
159 679 :M
f1_12 sf
.268 .027( \(Portland, Oregon, June 1989\), 246-257.)J
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(Bob Rau; page: 5 of 9)setjob
%%EndPageSetup
gS 0 0 552 730 rC
59 50 :M
f1_12 sf
.5(16.)A
86 50 :M
.331 .033(S. A. Mahlke, N. J. Warter, W. Y. Chen, P. P. Chang and W. W. Hwu. The effect)J
86 62 :M
-.131(of compiler optimizations on available parallelism in scalar programs. )A
416 0 7 730 rC
416 62 :M
12 f2_1 :p
6 :m
(  )S
420 62 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
416 62 :M
f1_12 sf
12 f2_1 :p
50 :m
.356 .036(Proc. 20th)J
86 0 8 730 rC
86 74 :M
6 :m
(  )S
91 74 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 74 :M
f1_12 sf
12 f2_1 :p
261 :m
-.124(Annual International Conference on Parallel Processing)A
341 0 6 730 rC
341 74 :M
6 :m
(  )S
344 74 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
347 74 :M
f1_12 sf
.099 .01( \(St. Charles, Illinois, August)J
86 86 :M
.839 .084(1991\), 142-145.)J
59 104 :M
.5(17.)A
86 104 :M
-.017(D. M. Lavery and W. W. Hwu. Unrolling-based optimizations for software)A
86 116 :M
-.06(pipelining. )A
140 0 7 730 rC
140 116 :M
12 f2_1 :p
6 :m
(  )S
144 116 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
140 116 :M
f1_12 sf
12 f2_1 :p
308.999 :m
-.118(Proc. 28th Annual International Symposium on Microarchitecture)A
444 0 5 730 rC
444 116 :M
3 :m
( )S
446 116 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
449 116 :M
f1_12 sf
-.164( \(Ann)A
86 128 :M
.092 .009(Arbor, Michigan, November 1995\), 327-337.)J
59 146 :M
.5(18.)A
86 146 :M
.158 .016(R. E. Hank, W. W. Hwu and B. R. Rau. Region-based compilation: Introduction,)J
86 158 :M
-.121(motivation, and initial experience)A
f3_12 sf
-.077(.)A
f1_12 sf
( )S
249 0 4 730 rC
249 158 :M
12 f2_1 :p
3 :m
( )S
250 158 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
249 158 :M
f1_12 sf
12 f2_1 :p
216.001 :m
-.119(International Journal of Parallel Programming)A
459 0 6 730 rC
459 158 :M
6 :m
(  )S
462 158 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
465 158 :M
f1_12 sf
.769 .077( 25,)J
86 170 :M
.131 .013(2 \(April 1997\), 113-146.)J
59 188 :M
.5(19.)A
86 188 :M
-.072(J. A. Fisher. Trace scheduling: a technique for global microcode compaction)A
f3_12 sf
(.)S
f1_12 sf
( )S
454 0 4 730 rC
454 188 :M
12 f2_1 :p
3 :m
( )S
455 188 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
454 188 :M
f1_12 sf
12 f2_1 :p
25 :m
-.328(IEEE)A
86 0 7 730 rC
86 200 :M
6 :m
(  )S
90 200 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 200 :M
f1_12 sf
12 f2_1 :p
130.001 :m
-.082(Transactions on Computers)A
211 0 5 730 rC
211 200 :M
3 :m
( )S
213 200 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
216 200 :M
f1_12 sf
.383 .038( C-30, 7 \(July 1981\), 478-490.)J
59 218 :M
.5(20.)A
86 218 :M
.279 .028(S. M. Freudenberger, T. R. Gross and P. G. Lowney. Avoidance and suppression)J
86 230 :M
-.1(of compensation code in a trace scheduler)A
f3_12 sf
-.061(.)A
f1_12 sf
( )S
289 0 8 730 rC
289 230 :M
12 f2_1 :p
6 :m
(  )S
294 230 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
289 230 :M
f1_12 sf
12 f2_1 :p
172 :m
-.121(ACM Transactions on Programming)A
86 0 7 730 rC
86 242 :M
6 :m
(  )S
90 242 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 242 :M
f1_12 sf
12 f2_1 :p
114.001 :m
-.065(Languages and Systems)A
195 0 5 730 rC
195 242 :M
3 :m
( )S
197 242 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
200 242 :M
f1_12 sf
.382 .038( 16, 4 \(July 1994\), 1156-1214.)J
59 260 :M
.5(21.)A
86 260 :M
.215 .021(S. A. Mahlke, D. C. Lin, W. Y. Chen, R. E. Hank and R. A. Bringmann. Effective)J
86 272 :M
-.093(compiler support for predicated execution using the hyperblock. )A
391 0 7 730 rC
391 272 :M
12 f2_1 :p
6 :m
(  )S
395 272 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
391 272 :M
f1_12 sf
12 f2_1 :p
87 :m
-.04(Proc. 25th Annual)A
86 0 4 730 rC
86 284 :M
3 :m
( )S
87 284 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 284 :M
f1_12 sf
12 f2_1 :p
218.999 :m
-.153(International Symposium on Microarchitecture)A
300 0 5 730 rC
300 284 :M
3 :m
( )S
302 284 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
305 284 :M
f1_12 sf
.594 .059( \(1992\), 45-54.)J
59 302 :M
.5(22.)A
86 302 :M
-.105(K. Ebcioglu and A. Nicolau. A )A
f3_12 sf
-.106(global)A
f1_12 sf
-.1( resource-constrained parallelization technique.)A
86 0 7 730 rC
86 314 :M
12 f2_1 :p
6 :m
(  )S
90 314 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 314 :M
f1_12 sf
12 f2_1 :p
260 :m
-.076(Proc. 3rd International Conference on Supercomputing)A
340 0 6 730 rC
340 314 :M
6 :m
(  )S
343 314 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
346 314 :M
f1_12 sf
.161 .016( \(Crete, Greece, June 1989\),)J
86 326 :M
.144(154-163.)A
59 344 :M
.5(23.)A
86 344 :M
-.061(S.-M. Moon and K. Ebcioglu. An efficient resource-constrained  global  scheduling)A
86 356 :M
-.062(technique for superscalar and VLIW processors. )A
318 0 7 730 rC
318 356 :M
12 f2_1 :p
6 :m
(  )S
322 356 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
318 356 :M
f1_12 sf
12 f2_1 :p
148.999 :m
-.098(Proc. 25th Annual International)A
86 0 7 730 rC
86 368 :M
6 :m
(  )S
90 368 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 368 :M
f1_12 sf
12 f2_1 :p
157 :m
-.148(Symposium on Microarchitecture)A
238 0 5 730 rC
238 368 :M
3 :m
( )S
240 368 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
243 368 :M
f1_12 sf
-.027( \(Portland, Oregon, December 1992\).)A
59 386 :M
.5(24.)A
86 386 :M
.623 .062(J. A. Fisher. )J
150 0 9 730 rC
150 386 :M
12 f2_1 :p
9 :m
(   )S
156 386 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
150 386 :M
f1_12 sf
12 f2_1 :p
303.001 :m
-.132(Global Code Generation for Instruction-Level Parallelism: Trace)A
86 0 7 730 rC
86 398 :M
6 :m
(  )S
90 398 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 398 :M
f1_12 sf
12 f2_1 :p
63 :m
-.089(Scheduling-2)A
143 0 6 730 rC
143 398 :M
6 :m
(  )S
146 398 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
149 398 :M
f1_12 sf
-.045(. Technical Report HPL-93-43. Hewlett-Packard Laboratories, June)A
86 410 :M
.25(1993.)A
59 428 :M
.5(25.)A
86 428 :M
-.078(S. Abraham, V. Kathail and B. Deitrich. Meld scheduling: relaxing scheduling)A
86 440 :M
-.034(constraints across region boundaries. )A
265 0 7 730 rC
265 440 :M
12 f2_1 :p
6 :m
(  )S
269 440 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
265 440 :M
f1_12 sf
12 f2_1 :p
206.001 :m
-.144(Proc. 29th Annual IEEE/ACM International)A
86 0 7 730 rC
86 452 :M
6 :m
(  )S
90 452 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 452 :M
f1_12 sf
12 f2_1 :p
157 :m
-.148(Symposium on Microarchitecture)A
238 0 5 730 rC
238 452 :M
3 :m
( )S
240 452 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
243 452 :M
f1_12 sf
.121 .012( \(Paris, France, December 1996\), 308-321.)J
59 470 :M
.5(26.)A
86 470 :M
.182 .018(J. C. Dehnert, P. Y.-T. Hsu and J. P. Bratt. Overlapped loop support in the Cydra 5.)J
86 0 7 730 rC
86 482 :M
12 f2_1 :p
6 :m
(  )S
90 482 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 482 :M
f1_12 sf
12 f2_1 :p
377.997 :m
-.099(Proc. Third International Conference on Architectural Support for Programming)A
86 0 7 730 rC
86 494 :M
6 :m
(  )S
90 494 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 494 :M
f1_12 sf
12 f2_1 :p
162.999 :m
-.109(Languages and Operating Systems)A
244 0 5 730 rC
244 494 :M
3 :m
( )S
246 494 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
249 494 :M
f1_12 sf
.396 .04( \(Boston, Mass., April 1989\), 26-38.)J
59 512 :M
.5(27.)A
86 512 :M
.318 .032(B. R. Rau, M. S. Schlansker and P. P. Tirumalai. )J
328 0 8 730 rC
328 512 :M
12 f2_1 :p
6 :m
(  )S
333 512 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
328 512 :M
f1_12 sf
12 f2_1 :p
142 :m
-.087(Code Generation Schemas for)A
86 0 10 730 rC
86 524 :M
9 :m
(   )S
93 524 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 524 :M
f1_12 sf
12 f2_1 :p
237 :m
-.106(Modulo Scheduled DO-Loops and WHILE-Loops)A
318 0 5 730 rC
318 524 :M
3 :m
( )S
320 524 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
323 524 :M
f1_12 sf
-.01( HPL-92-47. Hewlett Packard)A
86 536 :M
-.04(Laboratories, April 1992.)A
59 554 :M
.5(28.)A
86 554 :M
.665 .067(B. R. Rau. )J
142 0 4 730 rC
142 554 :M
12 f2_1 :p
3 :m
( )S
143 554 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
142 554 :M
f1_12 sf
12 f2_1 :p
133.999 :m
-.152(Iterative Modulo Scheduling)A
270 0 6 730 rC
270 554 :M
6 :m
(  )S
273 554 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
276 554 :M
f1_12 sf
-.008(. HPL Technical Report HPL-94-115.)A
86 566 :M
-.044(Hewlett-Packard Laboratories, November 1995.)A
59 584 :M
.5(29.)A
86 584 :M
-.038(P. Tirumalai, M. Lee and M. S. Schlansker. Parallelization of WHILE Loops on)A
86 596 :M
-.122(Pipelined Architectures)A
f3_12 sf
-.074(.)A
f1_12 sf
( )S
202 0 7 730 rC
202 596 :M
12 f2_1 :p
6 :m
(  )S
206 596 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
202 596 :M
f1_12 sf
12 f2_1 :p
149.999 :m
-.082(The Journal of Supercomputing)A
346 0 6 730 rC
346 596 :M
6 :m
(  )S
349 596 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
352 596 :M
f1_12 sf
.421 .042( 5 \(1991\), 119-136.)J
59 614 :M
.5(30.)A
86 614 :M
-.03(D. M. Lavery and W. W. Hwu. Modulo scheduling of loops in control-intensive)A
86 626 :M
-.029(non-numeric programs. )A
201 0 7 730 rC
201 626 :M
12 f2_1 :p
6 :m
(  )S
205 626 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
201 626 :M
f1_12 sf
12 f2_1 :p
280.998 :m
-.114(Proc. 29th Annual IEEE/ACM International Symposium on)A
86 0 10 730 rC
86 638 :M
9 :m
(   )S
93 638 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 638 :M
f1_12 sf
12 f2_1 :p
82 :m
-.246(Microarchitecture)A
163 0 5 730 rC
163 638 :M
3 :m
( )S
165 638 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
168 638 :M
f1_12 sf
.121 .012( \(Paris, France, December 1996\), 126-137.)J
59 656 :M
.5(31.)A
86 656 :M
.267 .027(N. J. Warter, J. W. Bockhaus, G. E. Haab and K. Subramanian. Enhanced modulo)J
86 668 :M
-.062(scheduling for loops with conditional branches. )A
314 0 7 730 rC
314 668 :M
12 f2_1 :p
6 :m
(  )S
318 668 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
314 668 :M
f1_12 sf
12 f2_1 :p
169.999 :m
-.106(Proc. The 25th Annual International)A
86 0 7 730 rC
86 680 :M
6 :m
(  )S
90 680 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 680 :M
f1_12 sf
12 f2_1 :p
157 :m
-.148(Symposium on Microarchitecture)A
238 0 5 730 rC
238 680 :M
3 :m
( )S
240 680 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
243 680 :M
f1_12 sf
.009 .001( \(Portland, Oregon, December 1992\), 170-179.)J
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(Bob Rau; page: 6 of 9)setjob
%%EndPageSetup
gS 0 0 552 730 rC
59 50 :M
f1_12 sf
.5(32.)A
86 50 :M
-.011(M. G. Stoodley and C. G. Lee. Software pipelining loops with conditional branches.)A
86 0 7 730 rC
86 62 :M
12 f2_1 :p
6 :m
(  )S
90 62 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 62 :M
f1_12 sf
12 f2_1 :p
366.002 :m
-.141(Proc. 29th Annual IEEE/ACM International Symposium on Microarchitecture)A
447 0 5 730 rC
447 62 :M
3 :m
( )S
449 62 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
452 62 :M
f1_12 sf
.598 .06( \(Paris,)J
86 74 :M
.013 .001(France, December 1996\), 262-273.)J
59 92 :M
.5(33.)A
86 92 :M
-.026(R. A. Huff. Lifetime-sensitive modulo scheduling. )A
330 0 7 730 rC
330 92 :M
12 f2_1 :p
6 :m
(  )S
334 92 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
330 92 :M
f1_12 sf
12 f2_1 :p
156.001 :m
.334 .033(Proc. SIGPLAN '93 Conference)J
86 0 6 730 rC
86 104 :M
6 :m
(  )S
89 104 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 104 :M
f1_12 sf
12 f2_1 :p
261 :m
-.137(on Programming Language Design and Implementation)A
341 0 6 730 rC
341 104 :M
6 :m
(  )S
344 104 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
347 104 :M
f1_12 sf
-.038( \(Albuquerque, New Mexico,)A
86 116 :M
.518 .052(June 1993\), 258-267.)J
59 134 :M
.5(34.)A
86 134 :M
-.025(J. Llosa, M. Valero, E. Ayguad\216 and A. Gonzalez. Hypernode reduction modulo)A
86 146 :M
(scheduling. )S
144 0 7 730 rC
144 146 :M
12 f2_1 :p
6 :m
(  )S
148 146 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
144 146 :M
f1_12 sf
12 f2_1 :p
330.001 :m
-.121(Proc. The 28th Annual International Symposium on Microarchitecture)A
469 0 5 730 rC
469 146 :M
3 :m
( )S
471 146 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 158 :M
f1_12 sf
.008 .001(\(Ann Arbor, Michigan, November 1995\), 350-360.)J
59 176 :M
.5(35.)A
86 176 :M
-.064(A. E. Eichenberger and E. S. Davidson. Stage scheduling: a technique to reduce the)A
86 188 :M
-.083(register requirements of a modulo schedule. )A
296 0 7 730 rC
296 188 :M
12 f2_1 :p
6 :m
(  )S
300 188 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
296 188 :M
f1_12 sf
12 f2_1 :p
148.999 :m
-.098(Proc. 28th Annual International)A
86 0 7 730 rC
86 200 :M
6 :m
(  )S
90 200 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 200 :M
f1_12 sf
12 f2_1 :p
157 :m
-.148(Symposium on Microarchitecture)A
238 0 5 730 rC
238 200 :M
3 :m
( )S
240 200 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
243 200 :M
f1_12 sf
.007 .001( \(Ann Arbor, Michigan, November 1995\), 338-349.)J
59 218 :M
.5(36.)A
86 218 :M
-.036(J. Llosa, M. Valero and E. Ayguade. Heuristics for register-constrained software)A
86 230 :M
-.06(pipelining. )A
140 0 7 730 rC
140 230 :M
12 f2_1 :p
6 :m
(  )S
144 230 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
140 230 :M
f1_12 sf
12 f2_1 :p
280.998 :m
-.114(Proc. 29th Annual IEEE/ACM International Symposium on)A
86 0 10 730 rC
86 242 :M
9 :m
(   )S
93 242 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 242 :M
f1_12 sf
12 f2_1 :p
82 :m
-.246(Microarchitecture)A
163 0 5 730 rC
163 242 :M
3 :m
( )S
165 242 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
168 242 :M
f1_12 sf
.121 .012( \(Paris, France, December 1996\), 250-261.)J
59 260 :M
.5(37.)A
86 260 :M
.253 .025(V. H. Allan, R. B. Jones, R. M. Lee and S. J. Allan. Software pipelining)J
f3_12 sf
(.)S
86 0 8 730 rC
86 272 :M
f1_12 sf
12 f2_1 :p
6 :m
(  )S
91 272 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 272 :M
f1_12 sf
12 f2_1 :p
95 :m
-.041(Computing Surveys)A
176 0 5 730 rC
176 272 :M
3 :m
( )S
178 272 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
181 272 :M
f1_12 sf
.208 .021( 27, 3 \(September 1995\), 367-432.)J
59 290 :M
.5(38.)A
86 290 :M
-.027(D. Callahan, S. Carr and K. Kennedy. Improving register allocation for subscripted)A
86 302 :M
-.031(variables. )A
135 0 7 730 rC
135 302 :M
12 f2_1 :p
6 :m
(  )S
139 302 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
135 302 :M
f1_12 sf
12 f2_1 :p
344 :m
-.028(Proc. SIGPLAN '90 Conference on Programming Language Design and)A
86 0 4 730 rC
86 314 :M
3 :m
( )S
87 314 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 314 :M
f1_12 sf
12 f2_1 :p
73 :m
-.229(Implementation)A
153 0 6 730 rC
153 314 :M
6 :m
(  )S
156 314 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
159 314 :M
f1_12 sf
.414 .041( \(June 1990\), 53-65.)J
59 332 :M
.5(39.)A
86 332 :M
-.072(B. R. Rau. Data flow and dependence analysis for instruction level parallelism, in)A
86 0 7 730 rC
86 344 :M
12 f2_1 :p
6 :m
(  )S
90 344 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 344 :M
f1_12 sf
12 f2_1 :p
399.001 :m
-.092(Fourth International Workshop on Languages and Compilers for Parallel Computing)A
479 0 6 730 rC
479 344 :M
6 :m
(  )S
482 344 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
485 344 :M
f1_12 sf
(,)S
86 356 :M
-.015(U. Banerjee, D. Gelernter, A. Nicolau and D. Padua \(Editor\). \(Springer-Verlag,)A
86 368 :M
.839 .084(1992\), 236-250.)J
59 386 :M
.5(40.)A
86 386 :M
-.034(E. Duesterwald, R. Gupta and M. L. Soffa. A practical dataflow framework for array)A
86 398 :M
-.095(reference analysis and its use in optimizations. )A
308 0 7 730 rC
308 398 :M
12 f2_1 :p
6 :m
(  )S
312 398 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
308 398 :M
f1_12 sf
12 f2_1 :p
171 :m
.272 .027(Proc. SIGPLAN '93 Conference on)J
86 0 7 730 rC
86 410 :M
6 :m
(  )S
90 410 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 410 :M
f1_12 sf
12 f2_1 :p
245.999 :m
-.146(Programming Language Design and Implementation)A
326 0 6 730 rC
326 410 :M
6 :m
(  )S
329 410 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
332 410 :M
f1_12 sf
-.038( \(Albuquerque, New Mexico,)A
86 422 :M
.546 .055(June 1993\), 68-77.)J
59 440 :M
.5(41.)A
86 440 :M
-.005(R. Bodik and S. Anik. Path-sensitive value flow analysis. )A
364 0 7 730 rC
364 440 :M
12 f2_1 :p
6 :m
(  )S
368 440 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
364 440 :M
f1_12 sf
12 f2_1 :p
78.999 :m
-.051(Proc. 25th ACM)A
86 0 7 730 rC
86 452 :M
6 :m
(  )S
90 452 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 452 :M
f1_12 sf
12 f2_1 :p
357.999 :m
-.052(SIGPLAN-SIGACT Symposium on Principles of Programming Languages)A
86 0 4 730 rC
86 464 :M
3 :m
( )S
87 464 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 464 :M
f1_12 sf
12 f2_1 :p
53 :m
.19(\(POPL'98\))A
135 0 4 730 rC
135 464 :M
3 :m
( )S
136 464 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
139 464 :M
f1_12 sf
.069 .007( \(San Diego, California, January 1998\), 237-251.)J
59 482 :M
.5(42.)A
86 482 :M
.005 0(B. R. Rau, M. Lee, P. Tirumalai and M. S. Schlansker. Register Allocation for)J
86 494 :M
-.025(Software Pipelined Loops. )A
216 0 7 730 rC
216 494 :M
12 f2_1 :p
6 :m
(  )S
220 494 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
216 494 :M
f1_12 sf
12 f2_1 :p
235.999 :m
.113 .011(Proc. SIGPLAN'92 Conference on Programming)J
86 0 7 730 rC
86 506 :M
6 :m
(  )S
90 506 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 506 :M
f1_12 sf
12 f2_1 :p
178 :m
-.17(Language Design and Implementation)A
258 0 6 730 rC
258 506 :M
6 :m
(  )S
261 506 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
264 506 :M
f1_12 sf
.167 .017( \(San Francisco, June 17-19 1992\).)J
59 524 :M
.5(43.)A
86 524 :M
-.053(A. E. Eichenberger and E. S. Davidson. Register allocation for predicated code.)A
86 0 7 730 rC
86 536 :M
12 f2_1 :p
6 :m
(  )S
90 536 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 536 :M
f1_12 sf
12 f2_1 :p
308.999 :m
-.118(Proc. 28th Annual International Symposium on Microarchitecture)A
390 0 5 730 rC
390 536 :M
3 :m
( )S
392 536 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
395 536 :M
f1_12 sf
-.028( \(Ann Arbor,)A
86 548 :M
.061 .006(Michigan, November 1995\), 180-191.)J
59 566 :M
.5(44.)A
86 566 :M
.131 .013(D. M. Gillies, D.-c. R. Ju, R. Johnson and M. Schlansker. Global predicate analysis)J
86 578 :M
-.13(and its application to register allocation. )A
276 0 7 730 rC
276 578 :M
12 f2_1 :p
6 :m
(  )S
280 578 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
276 578 :M
f1_12 sf
12 f2_1 :p
206.001 :m
-.144(Proc. 29th Annual IEEE/ACM International)A
86 0 7 730 rC
86 590 :M
6 :m
(  )S
90 590 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 590 :M
f1_12 sf
12 f2_1 :p
157 :m
-.148(Symposium on Microarchitecture)A
238 0 5 730 rC
238 590 :M
3 :m
( )S
240 590 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
243 590 :M
f1_12 sf
.121 .012( \(Paris, France, December 1996\), 114-125.)J
59 608 :M
.5(45.)A
86 608 :M
.467 .047(J. C. H. Park and M. S. Schlansker. )J
264 0 8 730 rC
264 608 :M
12 f2_1 :p
6 :m
(  )S
269 608 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
264 608 :M
f1_12 sf
12 f2_1 :p
113 :m
-.194(On predicated execution)A
371 0 6 730 rC
371 608 :M
6 :m
(  )S
374 608 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
377 608 :M
f1_12 sf
-.115(. Technical Report)A
86 620 :M
-.035(HPL-91-58. Hewlett-Packard Laboratories, Palo Alto CA, May 1991.)A
59 638 :M
.5(46.)A
86 638 :M
.022 .002(D. I. August, W. W. Hwu and S. A. Mahlke. A framework for balancing control)J
86 650 :M
-.061(flow and predication. )A
190 0 7 730 rC
190 650 :M
12 f2_1 :p
6 :m
(  )S
194 650 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
190 650 :M
f1_12 sf
12 f2_1 :p
280.998 :m
-.114(Proc. 30th Annual IEEE/ACM International Symposium on)A
86 0 10 730 rC
86 662 :M
9 :m
(   )S
93 662 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 662 :M
f1_12 sf
12 f2_1 :p
82 :m
-.246(Microarchitecture)A
163 0 5 730 rC
163 662 :M
3 :m
( )S
165 662 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
168 662 :M
f1_12 sf
-.053( \(Research Triangle Park, North Carolina, December 1997\), 92-)A
86 674 :M
.333(103.)A
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(Bob Rau; page: 7 of 9)setjob
%%EndPageSetup
gS 0 0 552 730 rC
59 50 :M
f1_12 sf
.5(47.)A
86 50 :M
.509 .051(D. I. August, D. A. Connors, S. A. Mahlke, J. W. Sias, K. M. Crozier, B.-C.)J
86 62 :M
.055 .006(Cheng, P. R. Eaton, Q. B. Olaniran and W. W. Hwu. Integrated predicated and)J
86 74 :M
-.14(speculative execution in the IMPACT EPIC architecture. )A
355 0 7 730 rC
355 74 :M
12 f2_1 :p
6 :m
(  )S
359 74 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
355 74 :M
f1_12 sf
12 f2_1 :p
87 :m
-.04(Proc. 25th Annual)A
86 0 4 730 rC
86 86 :M
3 :m
( )S
87 86 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 86 :M
f1_12 sf
12 f2_1 :p
244 :m
-.14(International Symposium on Computer Architecture)A
325 0 5 730 rC
325 86 :M
3 :m
( )S
327 86 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
330 86 :M
f1_12 sf
.15 .015( \(Barcelona, Spain, June 1998\),)J
86 98 :M
.144(227-237.)A
59 116 :M
.5(48.)A
86 116 :M
.066 .007(M. Schlansker, V. Kathail and S. Anik. )J
278 0 7 730 rC
278 116 :M
12 f2_1 :p
6 :m
(  )S
282 116 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
278 116 :M
f1_12 sf
12 f2_1 :p
209.999 :m
-.123(Parallelization of control recurrences for ILP)A
86 0 6 730 rC
86 128 :M
6 :m
(  )S
89 128 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 128 :M
f1_12 sf
12 f2_1 :p
51 :m
.04(processors)A
132 0 5 730 rC
132 128 :M
3 :m
( )S
134 128 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
137 128 :M
f1_12 sf
-.028( HPL-94-75. Hewlett-Packard Laboratories, Palo Alto CA, August, 1994)A
86 140 :M
.25(1994.)A
59 158 :M
.5(49.)A
86 158 :M
-.021(M. Schlansker and V. Kathail. )A
234 0 7 730 rC
234 158 :M
12 f2_1 :p
6 :m
(  )S
238 158 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
234 158 :M
f1_12 sf
12 f2_1 :p
227.999 :m
-.126(Techniques for Critical Path Reduction of Scalar)A
86 0 7 730 rC
86 170 :M
6 :m
(  )S
90 170 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 170 :M
f1_12 sf
12 f2_1 :p
45.984 :m
(Programs)S
127 0 5 730 rC
127 170 :M
3 :m
( )S
129 170 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
132 170 :M
f1_12 sf
-.02( HPL-95-112. Hewlett-Packard Laboratories, Palo Alto CA, 1995.)A
59 188 :M
.5(50.)A
86 188 :M
.333 .033(N. J. Warter, S. A. Mahlke, W. W. Hwu and B. R. Rau. Reverse if-conversion.)J
86 0 7 730 rC
86 200 :M
12 f2_1 :p
6 :m
(  )S
90 200 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 200 :M
f1_12 sf
12 f2_1 :p
344 :m
-.028(Proc. SIGPLAN '93 Conference on Programming Language Design and)A
86 0 4 730 rC
86 212 :M
3 :m
( )S
87 212 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 212 :M
f1_12 sf
12 f2_1 :p
73 :m
-.229(Implementation)A
153 0 6 730 rC
153 212 :M
6 :m
(  )S
156 212 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
159 212 :M
f1_12 sf
.102 .01( \(Albuquerque, New Mexico, June 1993\), 290-299.)J
59 230 :M
.5(51.)A
86 230 :M
-.01(N. J. Warter, D. M. Lavery and W. W. Hwu. The benefit of predicated execution for)A
86 242 :M
-.048(software pipelining. )A
184 0 7 730 rC
184 242 :M
12 f2_1 :p
6 :m
(  )S
188 242 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
184 242 :M
f1_12 sf
12 f2_1 :p
296 :m
-.09(Proc. 26th Annual Hawaii International Conference on System)A
86 0 7 730 rC
86 254 :M
6 :m
(  )S
90 254 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 254 :M
f1_12 sf
12 f2_1 :p
41 :m
-.14(Sciences)A
122 0 5 730 rC
122 254 :M
3 :m
( )S
124 254 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
127 254 :M
f1_12 sf
.286 .029( \(Hawaii, January 1993\), 497-506.)J
59 272 :M
.5(52.)A
86 272 :M
.283 .028(S. A. Mahlke, R. E. Hank, R. A. Bringmann, J. C. Gyllenhaal, D. M. Gallagher)J
86 284 :M
-.089(and W. W. Hwu. Characterizing the impact of predicated execution on branch)A
86 296 :M
-.059(prediction. )A
140 0 7 730 rC
140 296 :M
12 f2_1 :p
6 :m
(  )S
144 296 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
140 296 :M
f1_12 sf
12 f2_1 :p
272.002 :m
-.109(Proc. 27th International Symposium on Microarchitecture)A
407 0 5 730 rC
407 296 :M
3 :m
( )S
409 296 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
412 296 :M
f1_12 sf
.45 .045( \(San Jose,)J
86 308 :M
.112 .011(California, November 1994\), 217-227.)J
59 326 :M
.5(53.)A
86 326 :M
.351 .035(R. A. Johnson and M. S. Schlansker. )J
269 0 8 730 rC
269 326 :M
12 f2_1 :p
6 :m
(  )S
274 326 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
269 326 :M
f1_12 sf
12 f2_1 :p
134.001 :m
-.113(Analysis of Predicated Code)A
398 0 5 730 rC
398 326 :M
3 :m
( )S
400 326 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
403 326 :M
f1_12 sf
-.115(. Technical Report)A
86 338 :M
-.04(HPL-96-119. Hewlett-Packard Laboratories, December 1996.)A
59 356 :M
.5(54.)A
86 356 :M
.467 .047(S. A. Mahlke, W. Y. Chen, R. A. Bringmann, R. E. Hank, W. W. Hwu, B. R. Rau)J
86 368 :M
-.076(and M. S. Schlansker. Sentinel scheduling: a model for compiler-controlled)A
86 380 :M
-.118(speculative execution)A
f3_12 sf
-.072(.)A
f1_12 sf
( )S
193 0 8 730 rC
193 380 :M
12 f2_1 :p
6 :m
(  )S
198 380 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
193 380 :M
f1_12 sf
12 f2_1 :p
197 :m
-.104(ACM Transactions on Computer Systems)A
385 0 5 730 rC
385 380 :M
3 :m
( )S
387 380 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
390 380 :M
f1_12 sf
.081 .008( 11, 4 \(November)J
86 392 :M
.839 .084(1993\), 376-408.)J
59 410 :M
.5(55.)A
86 410 :M
-.094(K. Ebcioglu. Some design ideas for a VLIW architecture for sequential-natured)A
86 422 :M
.113 .011(software, in )J
146 0 7 730 rC
146 422 :M
12 f2_1 :p
6 :m
(  )S
150 422 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
146 422 :M
f1_12 sf
12 f2_1 :p
313.001 :m
-.015(Parallel Processing \(Proc. IFIP WG 10.3 Working Conference on)A
86 0 7 730 rC
86 434 :M
6 :m
(  )S
90 434 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 434 :M
f1_12 sf
12 f2_1 :p
149 :m
-.019(Parallel Processing, Pisa, Italy\))A
231 0 4 730 rC
231 434 :M
3 :m
( )S
232 434 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
235 434 :M
f1_12 sf
.141 .014(, M. Cosnard, M. H. Barton and M. Vanneschi)J
86 446 :M
.145 .014(\(Editor\). \(North Holland, Amsterdam, 1988\), 3-21.)J
59 464 :M
.5(56.)A
86 464 :M
.118 .012(D. I. August, B. L. Deitrich and S. A. Mahlke. )J
313 0 7 730 rC
313 464 :M
12 f2_1 :p
6 :m
(  )S
317 464 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
313 464 :M
f1_12 sf
12 f2_1 :p
166 :m
-.113(Sentinel Scheduling with Recovery)A
86 0 8 730 rC
86 476 :M
6 :m
(  )S
91 476 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 476 :M
f1_12 sf
12 f2_1 :p
33 :m
-.066(Blocks)A
114 0 5 730 rC
114 476 :M
3 :m
( )S
116 476 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
119 476 :M
f1_12 sf
-.074(. Technical Report CRHC-95-05. Center for Reliable and High-Performance)A
86 488 :M
-.033(Computing, University of Illinois at Urbana-Champaign, February 1995.)A
59 506 :M
.5(57.)A
86 506 :M
.301 .03(W. Y. Chen, S. A. Mahlke, W. W. Hwu, T. Kiyohara and P. P. Chang. Tolerating)J
86 518 :M
-.109(data access latency with register preloading. )A
296 0 7 730 rC
296 518 :M
12 f2_1 :p
6 :m
(  )S
300 518 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
296 518 :M
f1_12 sf
12 f2_1 :p
187 :m
-.07(Proc. 1992 International Conference on)A
86 0 7 730 rC
86 530 :M
6 :m
(  )S
90 530 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 530 :M
f1_12 sf
12 f2_1 :p
78 :m
-.101(Supercomputing)A
158 0 6 730 rC
158 530 :M
6 :m
(  )S
161 530 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
164 530 :M
f1_12 sf
.437 .044( \(Washington, D. C., July 1992\), 104-113.)J
59 548 :M
.5(58.)A
86 548 :M
-.048(G. M. Silberman and K. Ebcioglu. An architectural framework for supporting)A
86 560 :M
-.096(heterogeneous instruction-set architectures)A
f3_12 sf
-.06(.)A
f1_12 sf
( )S
293 0 8 730 rC
293 560 :M
12 f2_1 :p
6 :m
(  )S
298 560 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
293 560 :M
f1_12 sf
12 f2_1 :p
47 :m
-.142(Computer)A
336 0 4 730 rC
336 560 :M
3 :m
( )S
337 560 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
340 560 :M
f1_12 sf
.403 .04( 26, 6 \(June 1993\), 39-56.)J
59 578 :M
.5(59.)A
86 578 :M
.289 .029(D. M. Gallagher, W. Y. Chen, S. A. Mahlke, J. C. Gyllenhaal and W. W. Hwu.)J
86 590 :M
-.12(Dynamic memory disambiguation using the Memory Conflict Buffer. )A
416 0 7 730 rC
416 590 :M
12 f2_1 :p
6 :m
(  )S
420 590 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
416 590 :M
f1_12 sf
12 f2_1 :p
54 :m
.335 .034(Proc. Sixth)J
86 0 4 730 rC
86 602 :M
3 :m
( )S
87 602 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 602 :M
f1_12 sf
12 f2_1 :p
393.997 :m
-.117(International Conference on Architectural Support for Programming Languages and)A
86 0 8 730 rC
86 614 :M
6 :m
(  )S
91 614 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 614 :M
f1_12 sf
12 f2_1 :p
89 :m
-.123(Operating Systems)A
170 0 5 730 rC
170 614 :M
3 :m
( )S
172 614 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
175 614 :M
f1_12 sf
.101 .01( \(San Jose, California, October 1994\), 183-195.)J
59 632 :M
.5(60.)A
86 632 :M
.206 .021(W. W. Hwu, T. M. Conte and P. P. Chang. Comparing software and hardware)J
86 644 :M
-.053(schemes for reducing the cost of branches. )A
291 0 7 730 rC
291 644 :M
12 f2_1 :p
6 :m
(  )S
295 644 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
291 644 :M
f1_12 sf
12 f2_1 :p
148.999 :m
-.098(Proc. 16th Annual International)A
86 0 7 730 rC
86 656 :M
6 :m
(  )S
90 656 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 656 :M
f1_12 sf
12 f2_1 :p
182.001 :m
-.13(Symposium on Computer Architecture)A
263 0 5 730 rC
263 656 :M
3 :m
( )S
265 656 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
268 656 :M
f1_12 sf
.205 .021( \(May 1989\), 224-233.)J
59 674 :M
.5(61.)A
86 674 :M
-.032(J. A. Fisher and S. M. Freudenberger. Predicting conditional jump directions from)A
86 686 :M
.007 .001(previous runs of a program. )J
222 0 7 730 rC
222 686 :M
12 f2_1 :p
6 :m
(  )S
226 686 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
222 686 :M
f1_12 sf
12 f2_1 :p
249.001 :m
-.119(Proc. Fifth International Conference on Architectural)A
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(Bob Rau; page: 8 of 9)setjob
%%EndPageSetup
gS 0 0 552 730 rC
86 0 7 730 rC
86 50 :M
f1_12 sf
12 f2_1 :p
6 :m
(  )S
90 50 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 50 :M
f1_12 sf
12 f2_1 :p
289.001 :m
-.079(Support for Programming Languages and Operating Systems)A
370 0 5 730 rC
370 50 :M
3 :m
( )S
372 50 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
375 50 :M
f1_12 sf
.764 .076( \(Boston, Mass.,)J
86 62 :M
.093 .009(October 1992\), 85-95.)J
59 80 :M
.5(62.)A
86 80 :M
-.069(S. Mahlke and B. Natarajan. Compiler synthesized dynamic branch prediction. )A
462 0 7 730 rC
462 80 :M
12 f2_1 :p
6 :m
(  )S
466 80 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
462 80 :M
f1_12 sf
12 f2_1 :p
26 :m
.252(Proc.)A
86 0 6 730 rC
86 92 :M
6 :m
(  )S
89 92 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 92 :M
f1_12 sf
12 f2_1 :p
337.001 :m
-.17(29th Annual IEEE/ACM International Symposium on Microarchitecture)A
418 0 5 730 rC
418 92 :M
3 :m
( )S
420 92 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
423 92 :M
f1_12 sf
.598 .06( \(Paris,)J
86 104 :M
.013 .001(France, December 1996\), 153-164.)J
59 122 :M
.5(63.)A
86 122 :M
-.083(M. Schlansker and V. Kathail. Acceleration of first and higher order recurrences on)A
86 134 :M
-.085(processors with instruction level parallelism. )A
300 0 7 730 rC
300 134 :M
12 f2_1 :p
6 :m
(  )S
304 134 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
300 134 :M
f1_12 sf
12 f2_1 :p
159 :m
-.022(Proc. Sixth Annual Workshop on)A
86 0 7 730 rC
86 146 :M
6 :m
(  )S
90 146 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 146 :M
f1_12 sf
12 f2_1 :p
234.002 :m
-.11(Languages and Compilers for Parallel Computing)A
314 0 6 730 rC
314 146 :M
6 :m
(  )S
317 146 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
320 146 :M
f1_12 sf
.069 .007( \(Portland Oregon, 1993\).)J
59 164 :M
.5(64.)A
86 164 :M
.316 .032(M. S. Schlansker, S. A. Mahlke and R. A. Johnson. )J
340 0 8 730 rC
340 164 :M
12 f2_1 :p
6 :m
(  )S
345 164 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
340 164 :M
f1_12 sf
12 f2_1 :p
104 :m
-.069(Bypassing the Branch)A
86 0 8 730 rC
86 176 :M
6 :m
(  )S
91 176 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 176 :M
f1_12 sf
12 f2_1 :p
233 :m
-.127(Bottleneck Using Control Critical Path Reduction)A
313 0 6 730 rC
313 176 :M
6 :m
(  )S
316 176 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
319 176 :M
f1_12 sf
-.084(. Technical Report HPL-98-??)A
86 188 :M
-.069(Hewlett-Packard Laboratories, \(to appear\) September 1998.)A
59 206 :M
.5(65.)A
86 206 :M
.359 .036(S. G. Abraham, R. A. Sugumar, D. Windheiser, B. R. Rau and R. Gupta.)J
86 218 :M
-.123(Predictability of load/store instruction latencies. )A
313 0 7 730 rC
313 218 :M
12 f2_1 :p
6 :m
(  )S
317 218 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
313 218 :M
f1_12 sf
12 f2_1 :p
148.999 :m
-.098(Proc. 26th Annual International)A
86 0 7 730 rC
86 230 :M
6 :m
(  )S
90 230 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 230 :M
f1_12 sf
12 f2_1 :p
157 :m
-.148(Symposium on Microarchitecture)A
238 0 5 730 rC
238 230 :M
3 :m
( )S
240 230 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
243 230 :M
f1_12 sf
-.011( \(December 1993\), 139-152.)A
59 248 :M
.5(66.)A
86 248 :M
.343 .034(S. G. Abraham and B. R. Rau. )J
238 0 7 730 rC
238 248 :M
12 f2_1 :p
6 :m
(  )S
242 248 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
238 248 :M
f1_12 sf
12 f2_1 :p
231.001 :m
-.114(Predicting Load Latencies Using Cache Profiling)A
463 0 6 730 rC
463 248 :M
6 :m
(  )S
466 248 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
469 248 :M
f1_12 sf
(.)S
86 260 :M
-.049(Technical Report HPL-94-110. Hewlett-Packard Laboratories, November 1994.)A
59 278 :M
.5(67.)A
86 278 :M
-.019(F. J. Sanchez and A. Gonzalez. Cache sensitive modulo scheduling. )A
413 0 7 730 rC
413 278 :M
12 f2_1 :p
6 :m
(  )S
417 278 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
413 278 :M
f1_12 sf
12 f2_1 :p
50 :m
.356 .036(Proc. 30th)J
86 0 8 730 rC
86 290 :M
6 :m
(  )S
91 290 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 290 :M
f1_12 sf
12 f2_1 :p
312.999 :m
-.179(Annual IEEE/ACM International Symposium on Microarchitecture)A
394 0 5 730 rC
394 290 :M
3 :m
( )S
396 290 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
399 290 :M
f1_12 sf
-.145( \(Research Triangle)A
86 302 :M
.044 .004(Park, North Carolina, December 1997\), 338-348.)J
59 320 :M
.5(68.)A
86 320 :M
-.018(T. C. Mowry and C.-K. Luk. Predicting data cache misses in non-numeric)A
86 332 :M
-.099(applications through correlation profiling. )A
286 0 7 730 rC
286 332 :M
12 f2_1 :p
6 :m
(  )S
290 332 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
286 332 :M
f1_12 sf
12 f2_1 :p
143.999 :m
-.132(Proc. 30th Annual IEEE/ACM)A
86 0 4 730 rC
86 344 :M
3 :m
( )S
87 344 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 344 :M
f1_12 sf
12 f2_1 :p
218.999 :m
-.153(International Symposium on Microarchitecture)A
300 0 5 730 rC
300 344 :M
3 :m
( )S
302 344 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
305 344 :M
f1_12 sf
-.053( \(Research Triangle Park, North)A
86 356 :M
-.018(Carolina, December 1997\), 314-320.)A
59 374 :M
.5(69.)A
86 374 :M
.289 .029(B. R. Rau, V. Kathail and S. A. Gupta. )J
279 0 10 730 rC
279 374 :M
12 f2_1 :p
9 :m
(   )S
286 374 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
279 374 :M
f1_12 sf
12 f2_1 :p
202.001 :m
-.16(Machine-Description Driven Compilers for)A
86 0 8 730 rC
86 386 :M
6 :m
(  )S
91 386 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 386 :M
f1_12 sf
12 f2_1 :p
85 :m
-.045(VLIW Processors)A
166 0 5 730 rC
166 386 :M
3 :m
( )S
168 386 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
171 386 :M
f1_12 sf
-.039(. HPL Technical Report HPL-98-40. Hewlett-Packard)A
86 398 :M
-.039(Laboratories, March 1998.)A
59 416 :M
.5(70.)A
86 416 :M
.093 .009(J. C. Gyllenhaal, W.-m. W. Hwu and B. R. Rau. Optimization of machine)J
86 428 :M
-.062(descriptions for efficient use. )A
227 0 7 730 rC
227 428 :M
12 f2_1 :p
6 :m
(  )S
231 428 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
227 428 :M
f1_12 sf
12 f2_1 :p
206.001 :m
-.144(Proc. 29th Annual IEEE/ACM International)A
86 0 7 730 rC
86 440 :M
6 :m
(  )S
90 440 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 440 :M
f1_12 sf
12 f2_1 :p
157 :m
-.148(Symposium on Microarchitecture)A
238 0 5 730 rC
238 440 :M
3 :m
( )S
240 440 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
243 440 :M
f1_12 sf
.121 .012( \(Paris, France, December 1996\), 349-358.)J
59 458 :M
.5(71.)A
86 458 :M
-.085(A. E. Eichenberger and E. S. Davidson. A reduced multipipeline machine description)A
86 470 :M
-.059(that preserves scheduling constraints. )A
266 0 7 730 rC
266 470 :M
12 f2_1 :p
6 :m
(  )S
270 470 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
266 470 :M
f1_12 sf
12 f2_1 :p
167.999 :m
.322 .032(Proc. SIGPLAN'96 Conference on)J
86 0 7 730 rC
86 482 :M
6 :m
(  )S
90 482 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 482 :M
f1_12 sf
12 f2_1 :p
245.999 :m
-.146(Programming Language Design and Implementation)A
326 0 6 730 rC
326 482 :M
6 :m
(  )S
329 482 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
332 482 :M
f1_12 sf
-.034( \(Philadelphia, Pennsylvania,)A
86 494 :M
.283 .028(May 1996\), 12-20.)J
59 512 :M
.5(72.)A
86 512 :M
(B. R. Rau. Iterative modulo scheduling)S
f3_12 sf
(.)S
f1_12 sf
( )S
280 0 4 730 rC
280 512 :M
12 f2_1 :p
3 :m
( )S
281 512 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
280 512 :M
f1_12 sf
12 f2_1 :p
202.999 :m
-.099(International Journal of Parallel Processing)A
477 0 6 730 rC
477 512 :M
6 :m
(  )S
480 512 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 524 :M
f1_12 sf
.405 .04(24, 1 \(February 1996\), 3-64.)J
59 542 :M
.5(73.)A
86 542 :M
.102 .01(B. R. Rau, M. S. Schlansker and P. P. Tirumalai. Code generation schemas for)J
86 554 :M
-.028(modulo scheduled loops. )A
208 0 7 730 rC
208 554 :M
12 f2_1 :p
6 :m
(  )S
212 554 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
208 554 :M
f1_12 sf
12 f2_1 :p
224 :m
-.076(Proc. 25th Annual International Symposium on)A
86 0 10 730 rC
86 566 :M
9 :m
(   )S
93 566 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 566 :M
f1_12 sf
12 f2_1 :p
82 :m
-.246(Microarchitecture)A
163 0 5 730 rC
163 566 :M
3 :m
( )S
165 566 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
168 566 :M
f1_12 sf
.009 .001( \(Portland, Oregon, December 1992\), 158-169.)J
59 584 :M
.5(74.)A
86 584 :M
-.046(M. S. Schlansker and V. Kathail. Critical path reduction for scalar programs. )A
454 0 7 730 rC
454 584 :M
12 f2_1 :p
6 :m
(  )S
458 584 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
454 584 :M
f1_12 sf
12 f2_1 :p
26 :m
.252(Proc.)A
86 0 6 730 rC
86 596 :M
6 :m
(  )S
89 596 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 596 :M
f1_12 sf
12 f2_1 :p
280 :m
-.15(28th Annual International Symposium on Microarchitecture)A
361 0 5 730 rC
361 596 :M
3 :m
( )S
363 596 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
366 596 :M
f1_12 sf
-.062( \(Ann Arbor, Michigan,)A
86 608 :M
.334 .033(November 1995\), 57-69.)J
59 626 :M
.5(75.)A
86 626 :M
-.027(R. Johnson and M. Schlansker. Analysis techniques for predicated code. )A
434 0 7 730 rC
434 626 :M
12 f2_1 :p
6 :m
(  )S
438 626 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
434 626 :M
f1_12 sf
12 f2_1 :p
50 :m
.356 .036(Proc. 29th)J
86 0 8 730 rC
86 638 :M
6 :m
(  )S
91 638 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 638 :M
f1_12 sf
12 f2_1 :p
312.999 :m
-.179(Annual IEEE/ACM International Symposium on Microarchitecture)A
394 0 5 730 rC
394 638 :M
3 :m
( )S
396 638 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
399 638 :M
f1_12 sf
.392 .039( \(Paris, France,)J
86 650 :M
-.012(December 1996\), 100-113.)A
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(Bob Rau; page: 9 of 9)setjob
%%EndPageSetup
gS 0 0 552 730 rC
59 50 :M
f1_12 sf
.5(76.)A
86 50 :M
-.027(M. S. Schlansker, V. Kathail and S. Anik. Height reduction of control recurrences)A
86 62 :M
.282 .028(for ILP processors. )J
182 0 7 730 rC
182 62 :M
12 f2_1 :p
6 :m
(  )S
186 62 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
182 62 :M
f1_12 sf
12 f2_1 :p
308.999 :m
-.118(Proc. 27th Annual International Symposium on Microarchitecture)A
486 0 5 730 rC
486 62 :M
3 :m
( )S
488 62 :M
6 :m
(  )S
gR
gS 0 0 552 730 rC
86 74 :M
f1_12 sf
.221 .022(\(San Jose, California, November 1994\), 32-39.)J
endp
%%Trailer
end
%%EOF
